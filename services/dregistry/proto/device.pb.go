// Code generated by protoc-gen-go.
// source: device.proto
// DO NOT EDIT!

/*
Package device is a generated protocol buffer package.

It is generated from these files:
	device.proto

It has these top-level messages:
	DeviceRegistry
	GetDeviceRequest
	GetDeviceResponse
	ViewRequest
	Device
*/
package device

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type DeviceRegistry struct {
	Devices map[string]*Device `protobuf:"bytes,1,rep,name=devices" json:"devices,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *DeviceRegistry) Reset()                    { *m = DeviceRegistry{} }
func (m *DeviceRegistry) String() string            { return proto.CompactTextString(m) }
func (*DeviceRegistry) ProtoMessage()               {}
func (*DeviceRegistry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *DeviceRegistry) GetDevices() map[string]*Device {
	if m != nil {
		return m.Devices
	}
	return nil
}

type GetDeviceRequest struct {
	Alias string `protobuf:"bytes,1,opt,name=Alias,json=alias" json:"Alias,omitempty"`
}

func (m *GetDeviceRequest) Reset()                    { *m = GetDeviceRequest{} }
func (m *GetDeviceRequest) String() string            { return proto.CompactTextString(m) }
func (*GetDeviceRequest) ProtoMessage()               {}
func (*GetDeviceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GetDeviceRequest) GetAlias() string {
	if m != nil {
		return m.Alias
	}
	return ""
}

type GetDeviceResponse struct {
	Device *Device `protobuf:"bytes,1,opt,name=Device,json=device" json:"Device,omitempty"`
}

func (m *GetDeviceResponse) Reset()                    { *m = GetDeviceResponse{} }
func (m *GetDeviceResponse) String() string            { return proto.CompactTextString(m) }
func (*GetDeviceResponse) ProtoMessage()               {}
func (*GetDeviceResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GetDeviceResponse) GetDevice() *Device {
	if m != nil {
		return m.Device
	}
	return nil
}

type ViewRequest struct {
	Service string   `protobuf:"bytes,1,opt,name=Service,json=service" json:"Service,omitempty"`
	Filter  []string `protobuf:"bytes,2,rep,name=Filter,json=filter" json:"Filter,omitempty"`
}

func (m *ViewRequest) Reset()                    { *m = ViewRequest{} }
func (m *ViewRequest) String() string            { return proto.CompactTextString(m) }
func (*ViewRequest) ProtoMessage()               {}
func (*ViewRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ViewRequest) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *ViewRequest) GetFilter() []string {
	if m != nil {
		return m.Filter
	}
	return nil
}

type Device struct {
	Alias         string   `protobuf:"bytes,1,opt,name=Alias,json=alias" json:"Alias,omitempty"`
	Manufacturer  string   `protobuf:"bytes,2,opt,name=Manufacturer,json=manufacturer" json:"Manufacturer,omitempty"`
	Model         string   `protobuf:"bytes,3,opt,name=Model,json=model" json:"Model,omitempty"`
	SerialNumber  string   `protobuf:"bytes,4,opt,name=SerialNumber,json=serialNumber" json:"SerialNumber,omitempty"`
	HWAddress     string   `protobuf:"bytes,5,opt,name=HWAddress,json=hWAddress" json:"HWAddress,omitempty"`
	WakeUpMethod  string   `protobuf:"bytes,6,opt,name=WakeUpMethod,json=wakeUpMethod" json:"WakeUpMethod,omitempty"`
	HK_Accessory  string   `protobuf:"bytes,7,opt,name=HK_Accessory,json=hKAccessory" json:"HK_Accessory,omitempty"`
	BoundServices []string `protobuf:"bytes,8,rep,name=BoundServices,json=boundServices" json:"BoundServices,omitempty"`
}

func (m *Device) Reset()                    { *m = Device{} }
func (m *Device) String() string            { return proto.CompactTextString(m) }
func (*Device) ProtoMessage()               {}
func (*Device) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Device) GetAlias() string {
	if m != nil {
		return m.Alias
	}
	return ""
}

func (m *Device) GetManufacturer() string {
	if m != nil {
		return m.Manufacturer
	}
	return ""
}

func (m *Device) GetModel() string {
	if m != nil {
		return m.Model
	}
	return ""
}

func (m *Device) GetSerialNumber() string {
	if m != nil {
		return m.SerialNumber
	}
	return ""
}

func (m *Device) GetHWAddress() string {
	if m != nil {
		return m.HWAddress
	}
	return ""
}

func (m *Device) GetWakeUpMethod() string {
	if m != nil {
		return m.WakeUpMethod
	}
	return ""
}

func (m *Device) GetHK_Accessory() string {
	if m != nil {
		return m.HK_Accessory
	}
	return ""
}

func (m *Device) GetBoundServices() []string {
	if m != nil {
		return m.BoundServices
	}
	return nil
}

func init() {
	proto.RegisterType((*DeviceRegistry)(nil), "DeviceRegistry")
	proto.RegisterType((*GetDeviceRequest)(nil), "GetDeviceRequest")
	proto.RegisterType((*GetDeviceResponse)(nil), "GetDeviceResponse")
	proto.RegisterType((*ViewRequest)(nil), "ViewRequest")
	proto.RegisterType((*Device)(nil), "Device")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Publisher API

type Publisher interface {
	Publish(ctx context.Context, msg interface{}, opts ...client.PublishOption) error
}

type publisher struct {
	c     client.Client
	topic string
}

func (p *publisher) Publish(ctx context.Context, msg interface{}, opts ...client.PublishOption) error {
	return p.c.Publish(ctx, p.c.NewPublication(p.topic, msg), opts...)
}

func NewPublisher(topic string, c client.Client) Publisher {
	if c == nil {
		c = client.NewClient()
	}
	return &publisher{c, topic}
}

// Subscriber API

func RegisterSubscriber(topic string, s server.Server, h interface{}, opts ...server.SubscriberOption) error {
	return s.Subscribe(s.NewSubscriber(topic, h, opts...))
}

// Client API for DRegistry service

type DRegistryClient interface {
	View(ctx context.Context, in *ViewRequest, opts ...client.CallOption) (*DeviceRegistry, error)
	GetDevice(ctx context.Context, in *GetDeviceRequest, opts ...client.CallOption) (*GetDeviceResponse, error)
}

type dRegistryClient struct {
	c           client.Client
	serviceName string
}

func NewDRegistryClient(serviceName string, c client.Client) DRegistryClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "dregistry"
	}
	return &dRegistryClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *dRegistryClient) View(ctx context.Context, in *ViewRequest, opts ...client.CallOption) (*DeviceRegistry, error) {
	req := c.c.NewRequest(c.serviceName, "DRegistry.View", in)
	out := new(DeviceRegistry)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dRegistryClient) GetDevice(ctx context.Context, in *GetDeviceRequest, opts ...client.CallOption) (*GetDeviceResponse, error) {
	req := c.c.NewRequest(c.serviceName, "DRegistry.GetDevice", in)
	out := new(GetDeviceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DRegistry service

type DRegistryHandler interface {
	View(context.Context, *ViewRequest, *DeviceRegistry) error
	GetDevice(context.Context, *GetDeviceRequest, *GetDeviceResponse) error
}

func RegisterDRegistryHandler(s server.Server, hdlr DRegistryHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&DRegistry{hdlr}, opts...))
}

type DRegistry struct {
	DRegistryHandler
}

func (h *DRegistry) View(ctx context.Context, in *ViewRequest, out *DeviceRegistry) error {
	return h.DRegistryHandler.View(ctx, in, out)
}

func (h *DRegistry) GetDevice(ctx context.Context, in *GetDeviceRequest, out *GetDeviceResponse) error {
	return h.DRegistryHandler.GetDevice(ctx, in, out)
}

func init() { proto.RegisterFile("device.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 406 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x52, 0xc1, 0x6e, 0xd4, 0x30,
	0x10, 0x6d, 0x76, 0x9b, 0x84, 0x4c, 0x52, 0x68, 0x2d, 0x84, 0xac, 0x55, 0x11, 0xc1, 0x42, 0x22,
	0xa7, 0x1c, 0x96, 0x0a, 0x21, 0x2e, 0x68, 0xa1, 0x40, 0xa5, 0x6a, 0x39, 0xa4, 0x82, 0x1e, 0x51,
	0x36, 0x99, 0xb2, 0xa1, 0xd9, 0x64, 0xb1, 0x9d, 0x56, 0xf9, 0x02, 0x4e, 0xfc, 0x33, 0xb2, 0xbd,
	0x89, 0x4c, 0xe9, 0xcd, 0xef, 0xf9, 0xbd, 0x37, 0xa3, 0x99, 0x81, 0xa8, 0xc4, 0x9b, 0xaa, 0xc0,
	0x74, 0xcb, 0x5b, 0xd9, 0xb2, 0x3f, 0x0e, 0x3c, 0x3c, 0xd5, 0x44, 0x86, 0x3f, 0x2a, 0x21, 0x79,
	0x4f, 0x5e, 0x83, 0x6f, 0x24, 0x82, 0x3a, 0xf1, 0x34, 0x09, 0xe7, 0xc7, 0xe9, 0xbf, 0x8a, 0x1d,
	0x14, 0x1f, 0x1b, 0xc9, 0xfb, 0x6c, 0x10, 0xcf, 0x3e, 0x40, 0x64, 0x7f, 0x90, 0x43, 0x98, 0x5e,
	0x63, 0x4f, 0x9d, 0xd8, 0x49, 0x82, 0x4c, 0x3d, 0xc9, 0x53, 0x70, 0x6f, 0xf2, 0xba, 0x43, 0x3a,
	0x89, 0x9d, 0x24, 0x9c, 0xfb, 0x43, 0xae, 0x61, 0xdf, 0x4e, 0xde, 0x38, 0x2c, 0x81, 0xc3, 0xcf,
	0x28, 0x87, 0x7a, 0xbf, 0x3a, 0x14, 0x92, 0x3c, 0x06, 0x77, 0x51, 0x57, 0xb9, 0xd8, 0x45, 0xb9,
	0xb9, 0x02, 0xec, 0x04, 0x8e, 0x2c, 0xa5, 0xd8, 0xb6, 0x8d, 0x40, 0xf2, 0x0c, 0x3c, 0xc3, 0x68,
	0xad, 0x55, 0xc2, 0x33, 0x5d, 0xb2, 0x77, 0x10, 0x7e, 0xab, 0xf0, 0x76, 0x88, 0xa6, 0xe0, 0x5f,
	0x20, 0x1f, 0x0d, 0x41, 0xe6, 0x0b, 0x03, 0xc9, 0x13, 0xf0, 0x3e, 0x55, 0xb5, 0x44, 0x4e, 0x27,
	0xf1, 0x34, 0x09, 0x32, 0xef, 0x4a, 0x23, 0xf6, 0x7b, 0x32, 0x94, 0xb8, 0xbf, 0x2f, 0xc2, 0x20,
	0x5a, 0xe6, 0x4d, 0x77, 0x95, 0x17, 0xb2, 0xe3, 0xda, 0xae, 0x3e, 0xa3, 0x8d, 0xc5, 0x29, 0xe7,
	0xb2, 0x2d, 0xb1, 0xa6, 0x53, 0xe3, 0xdc, 0x28, 0xa0, 0x9c, 0x17, 0xc8, 0xab, 0xbc, 0xfe, 0xd2,
	0x6d, 0x56, 0xc8, 0xe9, 0xbe, 0x71, 0x0a, 0x8b, 0x23, 0xc7, 0x10, 0x9c, 0x5d, 0x2e, 0xca, 0x92,
	0xa3, 0x10, 0xd4, 0xd5, 0x82, 0x60, 0x3d, 0x10, 0x2a, 0xe1, 0x32, 0xbf, 0xc6, 0xaf, 0xdb, 0x25,
	0xca, 0x75, 0x5b, 0x52, 0xcf, 0x24, 0xdc, 0x5a, 0x1c, 0x79, 0x0e, 0xd1, 0xd9, 0xf9, 0xf7, 0x45,
	0x51, 0xa0, 0x10, 0x2d, 0xef, 0xa9, 0xaf, 0x35, 0xe1, 0xfa, 0x7c, 0xa4, 0xc8, 0x0b, 0x38, 0x78,
	0xdf, 0x76, 0x4d, 0xb9, 0x1b, 0x8d, 0xa0, 0x0f, 0xf4, 0x08, 0x0e, 0x56, 0x36, 0x39, 0xff, 0x09,
	0xc1, 0xe9, 0x78, 0x34, 0x2f, 0x61, 0x5f, 0xcd, 0x95, 0x44, 0xa9, 0x35, 0xde, 0xd9, 0xa3, 0x3b,
	0x97, 0xc3, 0xf6, 0xc8, 0x09, 0x04, 0xe3, 0xda, 0xc8, 0x51, 0x7a, 0x77, 0xd9, 0x33, 0x92, 0xfe,
	0xb7, 0x55, 0xb6, 0xb7, 0xf2, 0xf4, 0xb5, 0xbe, 0xfa, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x8d, 0xe1,
	0xd2, 0x8b, 0xbd, 0x02, 0x00, 0x00,
}
