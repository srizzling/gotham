// Code generated by protoc-gen-go.
// source: services/base/proto/base.proto
// DO NOT EDIT!

/*
Package base is a generated protocol buffer package.

It is generated from these files:
	services/base/proto/base.proto

It has these top-level messages:
	ActionRequest
	ActionResponse
	HealthCheckRequest
	HealthCheckResponse
*/
package base

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ActionRequest struct {
	Properties map[string]string `protobuf:"bytes,1,rep,name=properties" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *ActionRequest) Reset()                    { *m = ActionRequest{} }
func (m *ActionRequest) String() string            { return proto.CompactTextString(m) }
func (*ActionRequest) ProtoMessage()               {}
func (*ActionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ActionRequest) GetProperties() map[string]string {
	if m != nil {
		return m.Properties
	}
	return nil
}

type ActionResponse struct {
	Properties map[string]string `protobuf:"bytes,1,rep,name=properties" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *ActionResponse) Reset()                    { *m = ActionResponse{} }
func (m *ActionResponse) String() string            { return proto.CompactTextString(m) }
func (*ActionResponse) ProtoMessage()               {}
func (*ActionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ActionResponse) GetProperties() map[string]string {
	if m != nil {
		return m.Properties
	}
	return nil
}

type HealthCheckRequest struct {
	Properties map[string]string `protobuf:"bytes,1,rep,name=properties" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *HealthCheckRequest) Reset()                    { *m = HealthCheckRequest{} }
func (m *HealthCheckRequest) String() string            { return proto.CompactTextString(m) }
func (*HealthCheckRequest) ProtoMessage()               {}
func (*HealthCheckRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *HealthCheckRequest) GetProperties() map[string]string {
	if m != nil {
		return m.Properties
	}
	return nil
}

type HealthCheckResponse struct {
	Properties map[string]string `protobuf:"bytes,1,rep,name=properties" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *HealthCheckResponse) Reset()                    { *m = HealthCheckResponse{} }
func (m *HealthCheckResponse) String() string            { return proto.CompactTextString(m) }
func (*HealthCheckResponse) ProtoMessage()               {}
func (*HealthCheckResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *HealthCheckResponse) GetProperties() map[string]string {
	if m != nil {
		return m.Properties
	}
	return nil
}

func init() {
	proto.RegisterType((*ActionRequest)(nil), "ActionRequest")
	proto.RegisterType((*ActionResponse)(nil), "ActionResponse")
	proto.RegisterType((*HealthCheckRequest)(nil), "HealthCheckRequest")
	proto.RegisterType((*HealthCheckResponse)(nil), "HealthCheckResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Publisher API

type Publisher interface {
	Publish(ctx context.Context, msg interface{}, opts ...client.PublishOption) error
}

type publisher struct {
	c     client.Client
	topic string
}

func (p *publisher) Publish(ctx context.Context, msg interface{}, opts ...client.PublishOption) error {
	return p.c.Publish(ctx, p.c.NewPublication(p.topic, msg), opts...)
}

func NewPublisher(topic string, c client.Client) Publisher {
	if c == nil {
		c = client.NewClient()
	}
	return &publisher{c, topic}
}

// Subscriber API

func RegisterSubscriber(topic string, s server.Server, h interface{}, opts ...server.SubscriberOption) error {
	return s.Subscribe(s.NewSubscriber(topic, h, opts...))
}

// Client API for Service service

type ServiceClient interface {
	RunAction(ctx context.Context, in *ActionRequest, opts ...client.CallOption) (*ActionResponse, error)
}

type serviceClient struct {
	c           client.Client
	serviceName string
}

func NewServiceClient(serviceName string, c client.Client) ServiceClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "service"
	}
	return &serviceClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *serviceClient) RunAction(ctx context.Context, in *ActionRequest, opts ...client.CallOption) (*ActionResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Service.RunAction", in)
	out := new(ActionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Service service

type ServiceHandler interface {
	RunAction(context.Context, *ActionRequest, *ActionResponse) error
}

func RegisterServiceHandler(s server.Server, hdlr ServiceHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&Service{hdlr}, opts...))
}

type Service struct {
	ServiceHandler
}

func (h *Service) RunAction(ctx context.Context, in *ActionRequest, out *ActionResponse) error {
	return h.ServiceHandler.RunAction(ctx, in, out)
}

func init() { proto.RegisterFile("services/base/proto/base.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 250 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x92, 0x2b, 0x4e, 0x2d, 0x2a,
	0xcb, 0x4c, 0x4e, 0x2d, 0xd6, 0x4f, 0x4a, 0x2c, 0x4e, 0xd5, 0x2f, 0x28, 0xca, 0x2f, 0xc9, 0x07,
	0x33, 0xf5, 0xc0, 0x4c, 0xa5, 0x3e, 0x46, 0x2e, 0x5e, 0xc7, 0xe4, 0x92, 0xcc, 0xfc, 0xbc, 0xa0,
	0xd4, 0xc2, 0xd2, 0xd4, 0xe2, 0x12, 0x21, 0x3b, 0x2e, 0xae, 0x82, 0xa2, 0xfc, 0x82, 0xd4, 0xa2,
	0x92, 0xcc, 0xd4, 0x62, 0x09, 0x46, 0x05, 0x66, 0x0d, 0x6e, 0x23, 0x39, 0x3d, 0x14, 0x35, 0x7a,
	0x01, 0x70, 0x05, 0xae, 0x79, 0x25, 0x45, 0x95, 0x41, 0x48, 0x3a, 0xa4, 0x6c, 0xb9, 0xf8, 0xd1,
	0xa4, 0x85, 0x04, 0xb8, 0x98, 0xb3, 0x53, 0x2b, 0x25, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0x40,
	0x4c, 0x21, 0x11, 0x2e, 0xd6, 0xb2, 0xc4, 0x9c, 0xd2, 0x54, 0x09, 0x26, 0xb0, 0x18, 0x84, 0x63,
	0xc5, 0x64, 0xc1, 0xa8, 0x34, 0x81, 0x91, 0x8b, 0x0f, 0x66, 0x59, 0x71, 0x41, 0x7e, 0x5e, 0x71,
	0xaa, 0x90, 0x3d, 0x16, 0x17, 0xc9, 0xeb, 0xa1, 0x2a, 0xa2, 0xa5, 0x93, 0x66, 0x30, 0x72, 0x09,
	0x79, 0xa4, 0x26, 0xe6, 0x94, 0x64, 0x38, 0x67, 0xa4, 0x26, 0x67, 0xc3, 0x02, 0xca, 0x19, 0x8b,
	0xb3, 0x94, 0xf5, 0x30, 0x15, 0xd2, 0xd2, 0x69, 0xb3, 0x18, 0xb9, 0x84, 0x51, 0x6c, 0x84, 0x06,
	0x99, 0x0b, 0x16, 0xb7, 0xa9, 0xe8, 0x61, 0x51, 0x49, 0x43, 0xc7, 0x19, 0x59, 0x72, 0xb1, 0x07,
	0x43, 0x52, 0x9f, 0x90, 0x1e, 0x17, 0x67, 0x50, 0x69, 0x1e, 0x24, 0xca, 0x84, 0xf8, 0x50, 0x53,
	0x93, 0x14, 0x3f, 0x5a, 0x5c, 0x2a, 0x31, 0x24, 0xb1, 0x81, 0x53, 0xa7, 0x31, 0x20, 0x00, 0x00,
	0xff, 0xff, 0x48, 0xa3, 0x27, 0x05, 0xbf, 0x02, 0x00, 0x00,
}
