// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/srizzling/gotham/services/dregistry/proto/dregistry.proto

/*
Package dregistry is a generated protocol buffer package.

It is generated from these files:
	github.com/srizzling/gotham/services/dregistry/proto/dregistry.proto

It has these top-level messages:
	GetDeviceRequest
	GetDeviceResponse
	RegisterDeviceRequest
	RegisterDeviceResponse
*/
package dregistry

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import device "github.com/srizzling/gotham/shared/device/proto"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GetDeviceRequest struct {
	Alias string `protobuf:"bytes,1,opt,name=Alias" json:"Alias,omitempty"`
}

func (m *GetDeviceRequest) Reset()                    { *m = GetDeviceRequest{} }
func (m *GetDeviceRequest) String() string            { return proto.CompactTextString(m) }
func (*GetDeviceRequest) ProtoMessage()               {}
func (*GetDeviceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *GetDeviceRequest) GetAlias() string {
	if m != nil {
		return m.Alias
	}
	return ""
}

type GetDeviceResponse struct {
	Device *device.Device `protobuf:"bytes,1,opt,name=Device" json:"Device,omitempty"`
}

func (m *GetDeviceResponse) Reset()                    { *m = GetDeviceResponse{} }
func (m *GetDeviceResponse) String() string            { return proto.CompactTextString(m) }
func (*GetDeviceResponse) ProtoMessage()               {}
func (*GetDeviceResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GetDeviceResponse) GetDevice() *device.Device {
	if m != nil {
		return m.Device
	}
	return nil
}

type RegisterDeviceRequest struct {
	Device *device.Device `protobuf:"bytes,1,opt,name=Device" json:"Device,omitempty"`
}

func (m *RegisterDeviceRequest) Reset()                    { *m = RegisterDeviceRequest{} }
func (m *RegisterDeviceRequest) String() string            { return proto.CompactTextString(m) }
func (*RegisterDeviceRequest) ProtoMessage()               {}
func (*RegisterDeviceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *RegisterDeviceRequest) GetDevice() *device.Device {
	if m != nil {
		return m.Device
	}
	return nil
}

type RegisterDeviceResponse struct {
	Success bool `protobuf:"varint,1,opt,name=Success" json:"Success,omitempty"`
}

func (m *RegisterDeviceResponse) Reset()                    { *m = RegisterDeviceResponse{} }
func (m *RegisterDeviceResponse) String() string            { return proto.CompactTextString(m) }
func (*RegisterDeviceResponse) ProtoMessage()               {}
func (*RegisterDeviceResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *RegisterDeviceResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func init() {
	proto.RegisterType((*GetDeviceRequest)(nil), "GetDeviceRequest")
	proto.RegisterType((*GetDeviceResponse)(nil), "GetDeviceResponse")
	proto.RegisterType((*RegisterDeviceRequest)(nil), "RegisterDeviceRequest")
	proto.RegisterType((*RegisterDeviceResponse)(nil), "RegisterDeviceResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for DRegistry service

type DRegistryClient interface {
	GetDevice(ctx context.Context, in *GetDeviceRequest, opts ...client.CallOption) (*GetDeviceResponse, error)
	RegisterDevice(ctx context.Context, in *RegisterDeviceRequest, opts ...client.CallOption) (*RegisterDeviceResponse, error)
}

type dRegistryClient struct {
	c           client.Client
	serviceName string
}

func NewDRegistryClient(serviceName string, c client.Client) DRegistryClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "dregistry"
	}
	return &dRegistryClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *dRegistryClient) GetDevice(ctx context.Context, in *GetDeviceRequest, opts ...client.CallOption) (*GetDeviceResponse, error) {
	req := c.c.NewRequest(c.serviceName, "DRegistry.GetDevice", in)
	out := new(GetDeviceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dRegistryClient) RegisterDevice(ctx context.Context, in *RegisterDeviceRequest, opts ...client.CallOption) (*RegisterDeviceResponse, error) {
	req := c.c.NewRequest(c.serviceName, "DRegistry.RegisterDevice", in)
	out := new(RegisterDeviceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DRegistry service

type DRegistryHandler interface {
	GetDevice(context.Context, *GetDeviceRequest, *GetDeviceResponse) error
	RegisterDevice(context.Context, *RegisterDeviceRequest, *RegisterDeviceResponse) error
}

func RegisterDRegistryHandler(s server.Server, hdlr DRegistryHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&DRegistry{hdlr}, opts...))
}

type DRegistry struct {
	DRegistryHandler
}

func (h *DRegistry) GetDevice(ctx context.Context, in *GetDeviceRequest, out *GetDeviceResponse) error {
	return h.DRegistryHandler.GetDevice(ctx, in, out)
}

func (h *DRegistry) RegisterDevice(ctx context.Context, in *RegisterDeviceRequest, out *RegisterDeviceResponse) error {
	return h.DRegistryHandler.RegisterDevice(ctx, in, out)
}

func init() {
	proto.RegisterFile("github.com/srizzling/gotham/services/dregistry/proto/dregistry.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 250 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x50, 0xbd, 0x4e, 0xc3, 0x30,
	0x10, 0x6e, 0x06, 0x5a, 0x72, 0x48, 0x88, 0x5a, 0x50, 0xaa, 0x2c, 0x20, 0x4f, 0x9d, 0x6c, 0x29,
	0x74, 0x60, 0x60, 0x41, 0x44, 0x62, 0x37, 0x4f, 0x90, 0x26, 0xa7, 0xc4, 0x52, 0x5b, 0x17, 0x9f,
	0x83, 0x44, 0x1f, 0x80, 0xe7, 0x46, 0xd8, 0x2e, 0xd0, 0x12, 0xd1, 0xf1, 0x3b, 0x7d, 0xbf, 0x07,
	0x45, 0xa3, 0x5d, 0xdb, 0x2d, 0x44, 0x65, 0x56, 0x92, 0xac, 0xde, 0x6e, 0x97, 0x7a, 0xdd, 0xc8,
	0xc6, 0xb8, 0xb6, 0x5c, 0x49, 0x42, 0xfb, 0xa6, 0x2b, 0x24, 0x59, 0x5b, 0x6c, 0x34, 0x39, 0xfb,
	0x2e, 0x37, 0xd6, 0x38, 0xf3, 0x83, 0x85, 0xc7, 0xd9, 0xc3, 0xbf, 0x2e, 0x6d, 0x69, 0xb1, 0x96,
	0x35, 0x7e, 0x79, 0xed, 0x0c, 0x3c, 0x08, 0x6a, 0x3e, 0x83, 0x8b, 0x67, 0x74, 0x85, 0x3f, 0x29,
	0x7c, 0xed, 0x90, 0x1c, 0xbb, 0x84, 0x93, 0xc7, 0xa5, 0x2e, 0x69, 0x9a, 0xdc, 0x26, 0xb3, 0x54,
	0x05, 0xc0, 0xe7, 0x30, 0xfe, 0xc5, 0xa4, 0x8d, 0x59, 0x13, 0xb2, 0x1b, 0x18, 0x86, 0x8b, 0xe7,
	0x9e, 0xe5, 0x23, 0x11, 0x09, 0xf1, 0xcc, 0xef, 0xe1, 0x4a, 0xf9, 0xbe, 0x68, 0xf7, 0x43, 0x8e,
	0x2a, 0x73, 0x98, 0x1c, 0x2a, 0x63, 0xe8, 0x14, 0x46, 0x2f, 0x5d, 0x55, 0x21, 0x85, 0x86, 0xa7,
	0x6a, 0x07, 0xf3, 0x8f, 0x04, 0xd2, 0x42, 0xc5, 0xff, 0xb0, 0x39, 0xa4, 0xdf, 0x8d, 0xd9, 0x58,
	0x1c, 0xee, 0xcc, 0x98, 0xf8, 0x33, 0x88, 0x0f, 0xd8, 0x13, 0x9c, 0xef, 0xe7, 0xb2, 0x89, 0xe8,
	0x9d, 0x90, 0x5d, 0x8b, 0xfe, 0x82, 0x7c, 0xb0, 0x18, 0xfa, 0xef, 0xde, 0x7d, 0x06, 0x00, 0x00,
	0xff, 0xff, 0x0a, 0x3e, 0xfc, 0xb4, 0xe3, 0x01, 0x00, 0x00,
}
